{"version":3,"sources":["scripts/modernizr.js"],"names":["window","document","undefined","is","obj","type","testRunner","featureNames","feature","aliasIdx","result","nameIdx","featureName","featureNameSplit","featureIdx","tests","hasOwnProperty","name","push","toLowerCase","options","aliases","length","fn","split","Modernizr","Boolean","classes","join","setClasses","className","docElement","classPrefix","_config","isSVG","baseVal","enableJSClass","reJS","RegExp","replace","enableClasses","createElement","arguments","createElementNS","call","apply","getBody","body","fake","injectElementWithStyles","rule","callback","nodes","testnames","style","ret","node","docOverflow","mod","div","parseInt","id","appendChild","styleSheet","cssText","createTextNode","background","overflow","parentNode","removeChild","offsetHeight","contains","str","substr","indexOf","domToCSS","m1","nativeTestProps","props","value","i","CSS","supports","conditionText","getComputedStyle","position","cssToDOM","m2","toUpperCase","testProps","prefixed","skipValueTest","cleanElems","afterInit","mStyle","modElem","propsLength","prop","before","elems","shift","e","fnBind","that","testDOMProps","elem","item","testPropsAll","ucProp","charAt","slice","cssomPrefixes","testAllProps","ModernizrProto","_version","usePrefixes","_q","on","test","cb","self","this","setTimeout","addTest","addAsyncTest","prototype","documentElement","nodeName","inputElem","inputattrs","attrs","input","len","list","HTMLDataListElement","omPrefixes","domPrefixes","_domPrefixes","hasEvent","inner","eventName","element","isSupported","needsFallback","setAttribute","removeAttribute","bool","newSyntax","oldSyntax","prefixes","_prefixes","testStyles","DocumentTouch","query","offsetTop","doc","querySelectorAll","_cssomPrefixes","unshift"],"mappings":"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","file":"scripts/modernizr-a6642ffd85.js","sourcesContent":["/*!\n * modernizr v3.3.1\n * Build http://modernizr.com/download?-backgroundcliptext-cssmask-input-placeholder-pointerevents-supports-target-touchevents-setclasses-dontmin-cssclassprefix:supports-\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(window, document, undefined){\n  var tests = [];\n  \n\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.3.1',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': \"supports-\",\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name: name, fn: fn, options: options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name: null, fn: fn});\n    }\n  };\n\n  \n\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  \n\n  var classes = [];\n  \n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n  ;\n\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            /* jshint -W053 */\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  ;\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n  \n\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n  \n\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      isSVG ? docElement.className.baseVal = className : docElement.className = className;\n    }\n\n  }\n\n  ;\n\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * since we have a fairly large number of input tests that don't mutate the input\n   * we create a single element that can be shared with all of those tests for a\n   * minor perf boost\n   *\n   * @access private\n   * @returns {HTMLInputElement}\n   */\n  var inputElem = createElement('input');\n  \n/*!\n{\n  \"name\": \"Input attributes\",\n  \"property\": \"input\",\n  \"tags\": [\"forms\"],\n  \"authors\": [\"Mike Taylor\"],\n  \"notes\": [{\n    \"name\": \"WHATWG spec\",\n    \"href\": \"https://html.spec.whatwg.org/multipage/forms.html#input-type-attr-summary\"\n  }],\n  \"knownBugs\": [\"Some blackberry devices report false positive for input.multiple\"]\n}\n!*/\n/* DOC\nDetects support for HTML5 `<input>` element attributes and exposes Boolean subproperties with the results:\n\n```javascript\nModernizr.input.autocomplete\nModernizr.input.autofocus\nModernizr.input.list\nModernizr.input.max\nModernizr.input.min\nModernizr.input.multiple\nModernizr.input.pattern\nModernizr.input.placeholder\nModernizr.input.required\nModernizr.input.step\n```\n*/\n\n  // Run through HTML5's new input attributes to see if the UA understands any.\n  // Mike Taylr has created a comprehensive resource for testing these attributes\n  //   when applied to all input types:\n  //   miketaylr.com/code/input-type-attr.html\n\n  // Only input placeholder is tested while textarea's placeholder is not.\n  // Currently Safari 4 and Opera 11 have support only for the input placeholder\n  // Both tests are available in feature-detects/forms-placeholder.js\n\n  var inputattrs = 'autocomplete autofocus list placeholder max min multiple pattern required step'.split(' ');\n  var attrs = {};\n\n  Modernizr.input = (function(props) {\n    for (var i = 0, len = props.length; i < len; i++) {\n      attrs[ props[i] ] = !!(props[i] in inputElem);\n    }\n    if (attrs.list) {\n      // safari false positive's on datalist: webk.it/74252\n      // see also github.com/Modernizr/Modernizr/issues/146\n      attrs.list = !!(createElement('datalist') && window.HTMLDataListElement);\n    }\n    return attrs;\n  })(inputattrs);\n\n\n  /**\n   * If the browsers follow the spec, then they would expose vendor-specific style as:\n   *   elem.style.WebkitBorderRadius\n   * instead of something like the following, which would be technically incorrect:\n   *   elem.style.webkitBorderRadius\n\n   * Webkit ghosts their properties in lowercase but Opera & Moz do not.\n   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n   *   erik.eae.net/archives/2008/03/10/21.48.10/\n\n   * More here: github.com/Modernizr/Modernizr/issues/issue/21\n   *\n   * @access private\n   * @returns {string} The string representing the vendor-specific style properties\n   */\n\n  var omPrefixes = 'Moz O ms Webkit';\n  \n\n  /**\n   * List of JavaScript DOM values used for tests\n   *\n   * @memberof Modernizr\n   * @name Modernizr._domPrefixes\n   * @optionName Modernizr._domPrefixes\n   * @optionProp domPrefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\n   * than kebab-case properties, all properties are their Capitalized variant\n   *\n   * ```js\n   * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\n   * ```\n   */\n\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\n  ModernizrProto._domPrefixes = domPrefixes;\n  \n\n  /**\n   * Modernizr.hasEvent() detects support for a given event\n   *\n   * @memberof Modernizr\n   * @name Modernizr.hasEvent\n   * @optionName Modernizr.hasEvent()\n   * @optionProp hasEvent\n   * @access public\n   * @function hasEvent\n   * @param  {string|*} eventName - the name of an event to test for (e.g. \"resize\")\n   * @param  {Element|string} [element=HTMLDivElement] - is the element|document|window|tagName to test on\n   * @returns {boolean}\n   * @example\n   *  `Modernizr.hasEvent` lets you determine if the browser supports a supplied event.\n   *  By default, it does this detection on a div element\n   *\n   * ```js\n   *  hasEvent('blur') // true;\n   * ```\n   *\n   * However, you are able to give an object as a second argument to hasEvent to\n   * detect an event on something other than a div.\n   *\n   * ```js\n   *  hasEvent('devicelight', window) // true;\n   * ```\n   *\n   */\n\n  var hasEvent = (function() {\n\n    // Detect whether event support can be detected via `in`. Test on a DOM element\n    // using the \"blur\" event b/c it should always exist. bit.ly/event-detection\n    var needsFallback = !('onblur' in document.documentElement);\n\n    function inner(eventName, element) {\n\n      var isSupported;\n      if (!eventName) { return false; }\n      if (!element || typeof element === 'string') {\n        element = createElement(element || 'div');\n      }\n\n      // Testing via the `in` operator is sufficient for modern browsers and IE.\n      // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and\n      // \"resize\", whereas `in` \"catches\" those.\n      eventName = 'on' + eventName;\n      isSupported = eventName in element;\n\n      // Fallback technique for old Firefox - bit.ly/event-detection\n      if (!isSupported && needsFallback) {\n        if (!element.setAttribute) {\n          // Switch to generic element if it lacks `setAttribute`.\n          // It could be the `document`, `window`, or something else.\n          element = createElement('div');\n        }\n\n        element.setAttribute(eventName, '');\n        isSupported = typeof element[eventName] === 'function';\n\n        if (element[eventName] !== undefined) {\n          // If property was created, \"remove it\" by setting value to `undefined`.\n          element[eventName] = undefined;\n        }\n        element.removeAttribute(eventName);\n      }\n\n      return isSupported;\n    }\n    return inner;\n  })();\n\n\n  ModernizrProto.hasEvent = hasEvent;\n  \n/*!\n{\n  \"name\": \"DOM Pointer Events API\",\n  \"property\": \"pointerevents\",\n  \"tags\": [\"input\"],\n  \"authors\": [\"Stu Cox\"],\n  \"notes\": [\n    {\n      \"name\": \"W3C spec\",\n      \"href\": \"https://www.w3.org/TR/pointerevents/\"\n    }\n  ],\n  \"warnings\": [\"This property name now refers to W3C DOM PointerEvents: https://github.com/Modernizr/Modernizr/issues/548#issuecomment-12812099\"],\n  \"polyfills\": [\"handjs\"]\n}\n!*/\n/* DOC\nDetects support for the DOM Pointer Events API, which provides a unified event interface for pointing input devices, as implemented in IE10+.\n*/\n\n  // **Test name hijacked!**\n  // Now refers to W3C DOM PointerEvents spec rather than the CSS pointer-events property.\n  Modernizr.addTest('pointerevents', function() {\n    // Cannot use `.prefixed()` for events, so test each prefix\n    var bool = false,\n    i = domPrefixes.length;\n\n    // Don't forget un-prefixed...\n    bool = Modernizr.hasEvent('pointerdown');\n\n    while (i-- && !bool) {\n      if (hasEvent(domPrefixes[i] + 'pointerdown')) {\n        bool = true;\n      }\n    }\n    return bool;\n  });\n\n/*!\n{\n  \"name\": \"CSS Supports\",\n  \"property\": \"supports\",\n  \"caniuse\": \"css-featurequeries\",\n  \"tags\": [\"css\"],\n  \"builderAliases\": [\"css_supports\"],\n  \"notes\": [{\n    \"name\": \"W3 Spec\",\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#at-supports\"\n  },{\n    \"name\": \"Related Github Issue\",\n    \"href\": \"github.com/Modernizr/Modernizr/issues/648\"\n  },{\n    \"name\": \"W3 Info\",\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#the-csssupportsrule-interface\"\n  }]\n}\n!*/\n\n  var newSyntax = 'CSS' in window && 'supports' in window.CSS;\n  var oldSyntax = 'supportsCSS' in window;\n  Modernizr.addTest('supports', newSyntax || oldSyntax);\n\n/*!\n{\n  \"name\": \"placeholder attribute\",\n  \"property\": \"placeholder\",\n  \"tags\": [\"forms\", \"attribute\"],\n  \"builderAliases\": [\"forms_placeholder\"]\n}\n!*/\n/* DOC\nTests for placeholder attribute in inputs and textareas\n*/\n\n  Modernizr.addTest('placeholder', ('placeholder' in createElement('input') && 'placeholder' in createElement('textarea')));\n\n\n  /**\n   * List of property values to set for css tests. See ticket #21\n   * http://git.io/vUGl4\n   *\n   * @memberof Modernizr\n   * @name Modernizr._prefixes\n   * @optionName Modernizr._prefixes\n   * @optionProp prefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._prefixes is the internal list of prefixes that we test against\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\n   * an array of kebab-case vendor prefixes you can use within your code.\n   *\n   * Some common use cases include\n   *\n   * Generating all possible prefixed version of a CSS property\n   * ```js\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\n   *\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\n   * ```\n   *\n   * Generating all possible prefixed version of a CSS value\n   * ```js\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\n   *\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\n   * ```\n   */\n\n  var prefixes = (ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : []);\n\n  // expose these for the plugin API. Look in the source for how to join() them against your input\n  ModernizrProto._prefixes = prefixes;\n\n  \n\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   */\n\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if (body.fake) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n\n  }\n\n  ;\n\n  /**\n   * testStyles injects an element with style element and some CSS rules\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testStyles\n   * @optionName Modernizr.testStyles()\n   * @optionProp testStyles\n   * @access public\n   * @function testStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   * @example\n   *\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\n   * along with (possibly multiple) DOM elements. This lets you check for features\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\n   *   // elem is the first DOM node in the page (by default #modernizr)\n   *   // rule is the first argument you supplied - the CSS rule in string form\n   *\n   *   addTest('widthworks', elem.style.width === '9px')\n   * });\n   * ```\n   *\n   * If your test requires multiple nodes, you can include a third argument\n   * indicating how many additional div elements to include on the page. The\n   * additional nodes are injected as children of the `elem` that is returned as\n   * the first argument to the callback.\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\n   *   document.getElementById('modernizr').style.width === '1px'; // true\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\n   * }, 1);\n   * ```\n   *\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\n   * the second additional is `#modernizr3`, etc.).\n   * If you want to have more meaningful IDs for your function, you can provide\n   * them as the fourth argument, as an array of strings\n   *\n   * ```js\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\n   *   elem.firstChild === document.getElementById('foo'); // true\n   *   elem.lastChild === document.getElementById('bar'); // true\n   * }, 2, ['foo', 'bar']);\n   * ```\n   *\n   */\n\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n  \n/*!\n{\n  \"name\": \"Touch Events\",\n  \"property\": \"touchevents\",\n  \"caniuse\" : \"touch\",\n  \"tags\": [\"media\", \"attribute\"],\n  \"notes\": [{\n    \"name\": \"Touch Events spec\",\n    \"href\": \"https://www.w3.org/TR/2013/WD-touch-events-20130124/\"\n  }],\n  \"warnings\": [\n    \"Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device\"\n  ],\n  \"knownBugs\": [\n    \"False-positive on some configurations of Nokia N900\",\n    \"False-positive on some BlackBerry 6.0 builds – https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695\"\n  ]\n}\n!*/\n/* DOC\nIndicates if the browser supports the W3C Touch Events API.\n\nThis *does not* necessarily reflect a touchscreen device:\n\n* Older touchscreen devices only emulate mouse events\n* Modern IE touch devices implement the Pointer Events API instead: use `Modernizr.pointerevents` to detect support for that\n* Some browsers & OS setups may enable touch APIs when no touchscreen is connected\n* Future browsers may implement other event models for touch interactions\n\nSee this article: [You Can't Detect A Touchscreen](http://www.stucox.com/blog/you-cant-detect-a-touchscreen/).\n\nIt's recommended to bind both mouse and touch/pointer events simultaneously – see [this HTML5 Rocks tutorial](http://www.html5rocks.com/en/mobile/touchandmouse/).\n\nThis test will also return `true` for Firefox 4 Multitouch support.\n*/\n\n  // Chrome (desktop) used to lie about its support on this, but that has since been rectified: http://crbug.com/36415\n  Modernizr.addTest('touchevents', function() {\n    var bool;\n    if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n      bool = true;\n    } else {\n      // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n      // https://git.io/vznFH\n      var query = ['@media (', prefixes.join('touch-enabled),('), 'heartz', ')', '{#modernizr{top:9px;position:absolute}}'].join('');\n      testStyles(query, function(node) {\n        bool = node.offsetTop === 9;\n      });\n    }\n    return bool;\n  });\n\n/*!\n{\n  \"name\": \"CSS :target pseudo-class\",\n  \"caniuse\": \"css-sel3\",\n  \"property\": \"target\",\n  \"tags\": [\"css\"],\n  \"notes\": [{\n    \"name\": \"MDN documentation\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/:target\"\n  }],\n  \"authors\": [\"@zachleat\"],\n  \"warnings\": [\"Opera Mini supports :target but doesn't update the hash for anchor links.\"]\n}\n!*/\n/* DOC\nDetects support for the ':target' CSS pseudo-class.\n*/\n\n  // querySelector\n  Modernizr.addTest('target', function() {\n    var doc = window.document;\n    if (!('querySelectorAll' in doc)) {\n      return false;\n    }\n\n    try {\n      doc.querySelectorAll(':target');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  });\n\n\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\n  \n\n\n  /**\n   * contains checks to see if a string contains another string\n   *\n   * @access private\n   * @function contains\n   * @param {string} str - The string we want to check for substrings\n   * @param {string} substr - The substring we want to search the first string for\n   * @returns {boolean}\n   */\n\n  function contains(str, substr) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  ;\n\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   *\n   * @access private\n   */\n\n  var modElem = {\n    elem: createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function() {\n    delete modElem.elem;\n  });\n\n  \n\n  var mStyle = {\n    style: modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function() {\n    delete mStyle.style;\n  });\n\n  \n\n  /**\n   * domToCSS takes a camelCase string and converts it to kebab-case\n   * e.g. boxSizing -> box-sizing\n   *\n   * @access private\n   * @function domToCSS\n   * @param {string} name - String name of camelCase prop we want to convert\n   * @returns {string} The kebab-case version of the supplied name\n   */\n\n  function domToCSS(name) {\n    return name.replace(/([A-Z])/g, function(str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n  ;\n\n  /**\n   * nativeTestProps allows for us to use native feature detection functionality if available.\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @access private\n   * @function nativeTestProps\n   * @param {array} props - An array of property names\n   * @param {string} value - A string representing the value we want to check via @supports\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n   */\n\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps(props, value) {\n    var i = props.length;\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n      // Build a condition string for every prefixed variant\n      var conditionText = [];\n      while (i--) {\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n      }\n      conditionText = conditionText.join(' or ');\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\n        return getComputedStyle(node, null).position == 'absolute';\n      });\n    }\n    return undefined;\n  }\n  ;\n\n  /**\n   * cssToDOM takes a kebab-case string and converts it to camelCase\n   * e.g. box-sizing -> boxSizing\n   *\n   * @access private\n   * @function cssToDOM\n   * @param {string} name - String name of kebab-case prop we want to convert\n   * @returns {string} The camelCase version of the supplied name\n   */\n\n  function cssToDOM(name) {\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n  ;\n\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or kebab-case.\n\n  function testProps(props, prefixed, value, skipValueTest) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if (!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use\n\n    // inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    var elems = ['modernizr', 'tspan'];\n    while (!mStyle.style) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for (i = 0; i < propsLength; i++) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if (mStyle.style[prop] !== undefined) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] != before) {\n            cleanElems();\n            return prefixed == 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n          cleanElems();\n          return prefixed == 'pfx' ? prop : true;\n        }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  ;\n\n  /**\n   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\n   *\n   * @access private\n   * @function fnBind\n   * @param {function} fn - a function you want to change `this` reference to\n   * @param {object} that - the `this` you want to call the function with\n   * @returns {function} The wrapped version of the supplied function\n   */\n\n  function fnBind(fn, that) {\n    return function() {\n      return fn.apply(that, arguments);\n    };\n  }\n\n  ;\n\n  /**\n   * testDOMProps is a generic DOM property test; if a browser supports\n   *   a certain property, it won't return undefined for it.\n   *\n   * @access private\n   * @function testDOMProps\n   * @param {array.<string>} props - An array of properties to test for\n   * @param {object} obj - An object or Element you want to use to test the parameters again\n   * @param {boolean|object} elem - An Element to bind the property lookup again. Use `false` to prevent the check\n   */\n  function testDOMProps(props, obj, elem) {\n    var item;\n\n    for (var i in props) {\n      if (props[i] in obj) {\n\n        // return the property name as a string\n        if (elem === false) {\n          return props[i];\n        }\n\n        item = obj[props[i]];\n\n        // let's bind a function\n        if (is(item, 'function')) {\n          // bind to obj unless overriden\n          return fnBind(item, elem || obj);\n        }\n\n        // return the unbound function or obj or value\n        return item;\n      }\n    }\n    return false;\n  }\n\n  ;\n\n  /**\n   * testPropsAll tests a list of DOM properties we want to check against.\n   * We specify literally ALL possible (known and/or likely) properties on\n   * the element including the non-vendor prefixed one, for forward-\n   * compatibility.\n   *\n   * @access private\n   * @function testPropsAll\n   * @param {string} prop - A string of the property to test for\n   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\n   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\n   * @param {string} [value] - A string of a css value\n   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\n   */\n  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\n\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n    props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\n    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\n      return testProps(props, prefixed, value, skipValueTest);\n\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n    } else {\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n      return testDOMProps(props, prefixed, elem);\n    }\n  }\n\n  // Modernizr.testAllProps() investigates whether a given style property,\n  // or any of its vendor-prefixed variants, is recognized\n  //\n  // Note that the property names must be provided in the camelCase variant.\n  // Modernizr.testAllProps('boxSizing')\n  ModernizrProto.testAllProps = testPropsAll;\n\n  \n\n  /**\n   * testAllProps determines whether a given CSS property is supported in the browser\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testAllProps\n   * @optionName Modernizr.testAllProps()\n   * @optionProp testAllProps\n   * @access public\n   * @function testAllProps\n   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)\n   * @param {string} [value] - String of the value to test\n   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\n   * @example\n   *\n   * testAllProps determines whether a given CSS property, in some prefixed form,\n   * is supported by the browser.\n   *\n   * ```js\n   * testAllProps('boxSizing')  // true\n   * ```\n   *\n   * It can optionally be given a CSS value in string form to test if a property\n   * value is valid\n   *\n   * ```js\n   * testAllProps('display', 'block') // true\n   * testAllProps('display', 'penguin') // false\n   * ```\n   *\n   * A boolean can be passed as a third parameter to skip the value check when\n   * native detection (@supports) isn't available.\n   *\n   * ```js\n   * testAllProps('shapeOutside', 'content-box', true);\n   * ```\n   */\n\n  function testAllProps(prop, value, skipValueTest) {\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\n  }\n  ModernizrProto.testAllProps = testAllProps;\n  \n/*!\n{\n  \"name\": \"CSS Background Clip Text\",\n  \"property\": \"backgroundcliptext\",\n  \"authors\": [\"ausi\"],\n  \"tags\": [\"css\"],\n  \"notes\": [\n    {\n      \"name\": \"CSS Tricks Article\",\n      \"href\": \"https://css-tricks.com/image-under-text/\"\n    },\n    {\n      \"name\": \"MDN Docs\",\n      \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip\"\n    },\n    {\n      \"name\": \"Related Github Issue\",\n      \"href\": \"https://github.com/Modernizr/Modernizr/issues/199\"\n    }\n  ]\n}\n!*/\n/* DOC\nDetects the ability to control specifies whether or not an element's background\nextends beyond its border in CSS\n*/\n\n  Modernizr.addTest('backgroundcliptext', function() {\n    return testAllProps('backgroundClip', 'text');\n  });\n\n/*!\n{\n  \"name\": \"CSS Mask\",\n  \"caniuse\": \"css-masks\",\n  \"property\": \"cssmask\",\n  \"tags\": [\"css\"],\n  \"builderAliases\": [\"css_mask\"],\n  \"notes\": [\n    {\n      \"name\": \"Webkit blog on CSS Masks\",\n      \"href\": \"https://webkit.org/blog/181/css-masks/\"\n    },\n    {\n      \"name\": \"Safari Docs\",\n      \"href\": \"https://developer.apple.com/library/safari/#documentation/InternetWeb/Conceptual/SafariVisualEffectsProgGuide/Masks/Masks.html\"\n    },\n    {\n      \"name\": \"CSS SVG mask\",\n      \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/mask\"\n    },\n    {\n      \"name\": \"Combine with clippaths for awesomeness\",\n      \"href\": \"https://generic.cx/for/webkit/test.html\"\n    }\n  ]\n}\n!*/\n\n  Modernizr.addTest('cssmask', testAllProps('maskRepeat', 'repeat-x', true));\n\n\n  // Run each test\n  testRunner();\n\n  // Remove the \"no-js\" class if it exists\n  setClasses(classes);\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  window.Modernizr = Modernizr;\n\n\n;\n\n})(window, document);"],"sourceRoot":"/source/"}